#!/bin/bash
{{- $os_id := .chezmoi.osRelease.id }}
{{- if or (eq $os_id "pop") (eq $os_id "ubuntu") }}

# This comment includes the hash of packages to track changes
# Packages hash: {{ include ".chezmoidata/packages.yaml" | sha256sum }}

set -e

echo "üõ†Ô∏è Installing development tools..."

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install via apt with error handling
install_apt_package() {
    local package=$1
    echo "Installing $package..."
    if sudo apt install -y "$package" 2>/dev/null; then
        echo "‚úÖ $package installed successfully"
    else
        echo "‚ö†Ô∏è Failed to install $package via apt (package may not exist)"
        return 1
    fi
}

# Function to parse deeply nested YAML sections
parse_deep_nested_yaml() {
    local file=$1
    local section1=$2
    local section2=$3
    local section3=$4
    local in_section1=false
    local in_section2=false
    local in_section3=false
    local packages=()
    
    if [ ! -f "$file" ]; then
        return 1
    fi
    
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # Check for first level section
        if [[ "$line" =~ ^[[:space:]]*${section1}:[[:space:]]*$ ]]; then
            in_section1=true
            in_section2=false
            in_section3=false
            continue
        fi
        
        # Exit if we hit another top-level section
        if [[ "$line" =~ ^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*:[[:space:]]*$ ]] && [[ "$in_section1" == true ]]; then
            if [[ ! "$line" =~ ^[[:space:]]*${section1}:[[:space:]]*$ ]]; then
                break
            fi
        fi
        
        # Check for second level section
        if [[ "$in_section1" == true && "$line" =~ ^[[:space:]]{2,4}${section2}:[[:space:]]*$ ]]; then
            in_section2=true
            in_section3=false
            continue
        fi
        
        # Check for third level section (if provided)
        if [[ -n "$section3" && "$in_section2" == true && "$line" =~ ^[[:space:]]{4,8}${section3}:[[:space:]]*$ ]]; then
            in_section3=true
            continue
        fi
        
        # Extract packages
        local target_section=""
        if [[ -n "$section3" ]]; then
            target_section="$in_section3"
        else
            target_section="$in_section2"
        fi
        
        if [[ "$target_section" == true && "$line" =~ ^[[:space:]]{6,12}-[[:space:]] ]]; then
            # Remove leading spaces, dash, and quotes
            package=$(echo "$line" | sed 's/^[[:space:]]*-[[:space:]]*//' | sed "s/^['\"]//;s/['\"]$//")
            [[ -n "$package" ]] && packages+=("$package")
        fi
    done < "$file"
    
    printf '%s\n' "${packages[@]}"
}

# Function to parse install scripts from development section
parse_install_scripts() {
    local file=$1
    local in_development=false
    local in_install_scripts=false
    local current_name=""
    local current_url=""
    local current_args=""
    local scripts=()
    
    if [ ! -f "$file" ]; then
        return 1
    fi
    
    while IFS= read -r line || [ -n "$line" ]; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # Check for development section
        if [[ "$line" =~ ^[[:space:]]*development:[[:space:]]*$ ]]; then
            in_development=true
            in_install_scripts=false
            continue
        fi
        
        # Exit development section if we hit another top-level section
        if [[ "$line" =~ ^[[:space:]]*[a-zA-Z_][a-zA-Z0-9_]*:[[:space:]]*$ ]] && [[ "$in_development" == true ]]; then
            if [[ ! "$line" =~ ^[[:space:]]*install_scripts:[[:space:]]*$ ]]; then
                break
            fi
        fi
        
        # Check for install_scripts section within development
        if [[ "$in_development" == true && "$line" =~ ^[[:space:]]*install_scripts:[[:space:]]*$ ]]; then
            in_install_scripts=true
            continue
        fi
        
        # Parse script entries
        if [[ "$in_install_scripts" == true ]]; then
            # New script entry
            if [[ "$line" =~ ^[[:space:]]*-[[:space:]]*name:[[:space:]]*['\"]?([^'\"]+)['\"]?[[:space:]]*$ ]]; then
                # Save previous script if complete
                if [[ -n "$current_name" && -n "$current_url" ]]; then
                    scripts+=("$current_name|$current_url|$current_args")
                fi
                current_name="${BASH_REMATCH[1]}"
                current_url=""
                current_args=""
            elif [[ "$line" =~ ^[[:space:]]*url:[[:space:]]*['\"]?([^'\"]+)['\"]?[[:space:]]*$ ]]; then
                current_url="${BASH_REMATCH[1]}"
            elif [[ "$line" =~ ^[[:space:]]*args:[[:space:]]*['\"]?([^'\"]*)['\"]?[[:space:]]*$ ]]; then
                current_args="${BASH_REMATCH[1]}"
            fi
        fi
    done < "$file"
    
    # Save last script if complete
    if [[ -n "$current_name" && -n "$current_url" ]]; then
        scripts+=("$current_name|$current_url|$current_args")
    fi
    
    printf '%s\n' "${scripts[@]}"
}

# Update system first
echo "üì¶ Updating system packages..."
sudo apt update

# Read package lists from chezmoi data
PACKAGES_FILE="{{ .chezmoi.sourceDir }}/.chezmoidata/packages.yaml"

if [ ! -f "$PACKAGES_FILE" ]; then
    echo "‚ùå Packages file not found: $PACKAGES_FILE"
    exit 1
fi

# Install APT packages from ubuntu section
echo "üì¶ Installing APT packages..."
APT_PACKAGES=($(parse_deep_nested_yaml "$PACKAGES_FILE" "ubuntu" "apt"))
if [ ${#APT_PACKAGES[@]} -gt 0 ]; then
    for package in "${APT_PACKAGES[@]}"; do
        [[ -n "$package" ]] && install_apt_package "$package" || true
    done
else
    echo "‚ÑπÔ∏è No APT packages specified, skipping..."
fi

# Install Snap packages (regular)
echo "üì¶ Installing regular Snap packages..."
SNAP_REGULAR_PACKAGES=($(parse_deep_nested_yaml "$PACKAGES_FILE" "ubuntu" "snap" "regular"))
if [ ${#SNAP_REGULAR_PACKAGES[@]} -gt 0 ]; then
    for package in "${SNAP_REGULAR_PACKAGES[@]}"; do
        if [[ -n "$package" ]]; then
            echo "Installing $package via snap..."
            if command_exists snap && sudo snap install "$package" 2>/dev/null; then
                echo "‚úÖ $package installed via snap"
            else
                echo "‚ö†Ô∏è Failed to install $package via snap"
            fi
        fi
    done
else
    echo "‚ÑπÔ∏è No regular Snap packages specified, skipping..."
fi

# Install Snap packages (classic)
echo "üì¶ Installing classic Snap packages..."
SNAP_CLASSIC_PACKAGES=($(parse_deep_nested_yaml "$PACKAGES_FILE" "ubuntu" "snap" "classic"))
if [ ${#SNAP_CLASSIC_PACKAGES[@]} -gt 0 ]; then
    for package in "${SNAP_CLASSIC_PACKAGES[@]}"; do
        if [[ -n "$package" ]]; then
            echo "Installing $package via snap --classic..."
            if command_exists snap && sudo snap install "$package" --classic 2>/dev/null; then
                echo "‚úÖ $package installed via snap --classic"
            else
                echo "‚ö†Ô∏è Failed to install $package via snap --classic"
            fi
        fi
    done
else
    echo "‚ÑπÔ∏è No classic Snap packages specified, skipping..."
fi

# Install Flatpak packages
echo "üì¶ Installing Flatpak packages..."
FLATPAK_PACKAGES=($(parse_deep_nested_yaml "$PACKAGES_FILE" "ubuntu" "flatpak"))
if [ ${#FLATPAK_PACKAGES[@]} -gt 0 ]; then
    # Ensure flatpak is installed
    if ! command_exists flatpak; then
        install_apt_package "flatpak"
        sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    fi
    
    for package in "${FLATPAK_PACKAGES[@]}"; do
        if [[ -n "$package" ]]; then
            echo "Installing $package via flatpak..."
            if sudo flatpak install -y flathub "$package" 2>/dev/null; then
                echo "‚úÖ $package installed via flatpak"
            else
                echo "‚ö†Ô∏è Failed to install $package via flatpak"
            fi
        fi
    done
else
    echo "‚ÑπÔ∏è No Flatpak packages specified, skipping..."
fi

# Install development tools via install scripts
echo "üì¶ Installing development tools via install scripts..."
INSTALL_SCRIPTS=($(parse_install_scripts "$PACKAGES_FILE"))
if [ ${#INSTALL_SCRIPTS[@]} -gt 0 ]; then
    for script_info in "${INSTALL_SCRIPTS[@]}"; do
        IFS='|' read -r name url args <<< "$script_info"
        if [[ -n "$name" && -n "$url" ]]; then
            if ! command_exists "$name"; then
                echo "Installing $name..."
                if [[ "$args" == *"| sh"* ]]; then
                    # Handle piped commands
                    curl -fsSL "$url" | sh
                else
                    # Handle regular arguments
                    curl -fsSL "$url" | sh $args
                fi
                if [ $? -eq 0 ]; then
                    echo "‚úÖ $name installed successfully"
                else
                    echo "‚ö†Ô∏è Failed to install $name"
                fi
            else
                echo "‚ÑπÔ∏è $name is already installed, skipping..."
            fi
        fi
    done
else
    echo "‚ÑπÔ∏è No install scripts specified, skipping..."
fi

# Post-installation fixes
echo "üîß Applying post-installation fixes..."

# Create fd symlink if fd-find was installed
if command_exists fdfind && [ ! -f /usr/local/bin/fd ]; then
    sudo ln -s /usr/bin/fdfind /usr/local/bin/fd
    echo "‚úÖ Created fd symlink for fdfind"
fi

# Source cargo environment if rust was installed
if [ -f "$HOME/.cargo/env" ]; then
    source "$HOME/.cargo/env"
    echo "‚úÖ Sourced Rust/Cargo environment"
fi

echo "‚úÖ Development tools installation complete!"
echo "‚ÑπÔ∏è Some changes may require a logout/login or shell restart to take effect."

{{- end }}